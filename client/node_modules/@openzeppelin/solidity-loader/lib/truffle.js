const path = require('path');
const { existsSync } = require('fs');

const truffleConfig = require('truffle-config');
const findUp = require('find-up');
const flatten = require('array-flatten');
const pathIsInside = require('path-is-inside');


const { readFile } = require('./util');

// Finds truffle conifg file path
const getTruffleConfig = async (opts) => {
  let file = await findUp('truffle-config.js', opts);
  if (!file) file = await findUp('truffle.js', opts);
  return file;
};

// Loads truffle config
const getConfig = async ({ network, cwd }) => {
  if (!network) {
    throw new Error('You must specify the network name to deploy to.');
  }

  let config;
  const truffleConfigPath = await getTruffleConfig({ cwd });
  if (truffleConfigPath) {
    config = truffleConfig.load(truffleConfigPath, { network });
  } else {
    throw new Error('No Truffle Config file found!');
  }

  return config;
};

// Extracts ImportDirective directives from contract .json generated by Truffle
const getLocalDependencies = async (sourceContract, contractsBuildDirectory, contractsDirectory) => {
  const jsonFilePathByName = name => path.resolve(contractsBuildDirectory, `${name}.json`);

  const helper = async (contractName) => {
    const compiledContractPath = jsonFilePathByName(contractName);

    // read JSON contract produced by compile and return it
    const solJSON = await readFile(compiledContractPath, 'utf8');

    const contract = JSON.parse(solJSON);

    // grab all base contracts
    const baseContractNames = ((((contract.ast || {})
      .nodes || [])
      .filter(node => node.name === contractName)[0] || {})
      .baseContracts || [])
      // grab base contract name
      .map(node => node.baseName.name);

    // test if it exists locally
    const localBaseContracts = (await Promise.all(baseContractNames
      .map(name => readFile(jsonFilePathByName(name)))))
      .map(json => JSON.parse(json))
      // filter all contracts which are not local
      .filter(cont => pathIsInside(cont.ast.absolutePath, contractsDirectory));

    // return an array of contract .sol file paths as local dependencies
    return [
      ...localBaseContracts
        // get local contract filepath
        .map(cont => cont.ast.absolutePath),
      // call recursive on all local base contracts
      ...flatten(await Promise.all(localBaseContracts
        .map(cont => helper(cont.contractName)))),
    ];
  };

  // pick only unique values
  return [...new Set(await helper(sourceContract))];
};

module.exports = {
  getConfig,
  getLocalDependencies,
};
