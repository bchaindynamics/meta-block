"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// TODO: Add React and React Hook linting rules
var react_1 = require("react");
var providers = __importStar(require("../context/providers"));
var Web3Context_1 = __importDefault(require("../context/Web3Context"));
var forceUpdate_1 = __importDefault(require("../util/forceUpdate"));
function useWeb3Context(provider, options) {
    // TODO: update the context when the options change
    var context = react_1.useState(function () { return new Web3Context_1.default(provider, options); })[0];
    var forceUpdate = forceUpdate_1.default();
    function callForceUpdate() {
        forceUpdate(42);
    }
    // Causes components down the tree to re-render when any of the Web3Context properties change.
    react_1.useEffect(function () {
        context.on(Web3Context_1.default.NetworkIdChangedEventName, callForceUpdate);
        context.on(Web3Context_1.default.AccountsChangedEventName, callForceUpdate);
        context.on(Web3Context_1.default.ConnectionChangedEventName, callForceUpdate);
        return function () {
            context.off(Web3Context_1.default.NetworkIdChangedEventName, callForceUpdate);
            context.off(Web3Context_1.default.AccountsChangedEventName, callForceUpdate);
            context.off(Web3Context_1.default.ConnectionChangedEventName, callForceUpdate);
        };
    }, [context]);
    react_1.useEffect(function () {
        context.poll();
        return function () {
            context.stopPoll();
        };
    }, [context]);
    return context;
}
exports.useWeb3Context = useWeb3Context;
function useWeb3Injected(options) {
    var provider = react_1.useState(function () { return providers.injected(); })[0];
    return useWeb3Context(provider, options);
}
exports.useWeb3Injected = useWeb3Injected;
function useWeb3Network(connection, options) {
    var provider = react_1.useState(function () { return providers.connection(connection); })[0];
    return useWeb3Context(provider, options);
}
exports.useWeb3Network = useWeb3Network;
function useWeb3(fallbackConnection, options) {
    var provider = react_1.useState(function () {
        try {
            return providers.injected();
        }
        catch (e) {
            return providers.connection(fallbackConnection);
        }
    })[0];
    return useWeb3Context(provider, options);
}
exports.useWeb3 = useWeb3;
//# sourceMappingURL=useWeb3Hook.js.map