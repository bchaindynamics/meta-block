{"ast":null,"code":"import _regeneratorRuntime from \"/home/pranshu_ubuntu/Documents/starter-kit-gsn/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/pranshu_ubuntu/Documents/starter-kit-gsn/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport sleep from './sleep';\nexport default function getTransactionReceipt(_x, _x2) {\n  return _getTransactionReceipt.apply(this, arguments);\n}\n\nfunction _getTransactionReceipt() {\n  _getTransactionReceipt = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(web3, hash) {\n    var pollInterval,\n        receipt,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            pollInterval = _args.length > 2 && _args[2] !== undefined ? _args[2] : 500;\n            receipt = null;\n\n          case 2:\n            if (!(receipt === null)) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 5;\n            return getTransactionReceiptPromise(web3, hash);\n\n          case 5:\n            receipt = _context.sent;\n            _context.next = 8;\n            return sleep(pollInterval);\n\n          case 8:\n            _context.next = 2;\n            break;\n\n          case 10:\n            return _context.abrupt(\"return\", receipt);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getTransactionReceipt.apply(this, arguments);\n}\n\nfunction getTransactionReceiptPromise(web3, hash) {\n  // here we just promisify getTransactionReceipt function for convenience\n  return new Promise(function (resolve, reject) {\n    web3.eth.getTransactionReceipt(hash, function (err, data) {\n      if (err !== null) reject(err);else resolve(data);\n    });\n  });\n}","map":{"version":3,"sources":["/home/pranshu_ubuntu/Documents/starter-kit-gsn/client/src/utils/getTransactionReceipt.js"],"names":["sleep","getTransactionReceipt","web3","hash","pollInterval","receipt","getTransactionReceiptPromise","Promise","resolve","reject","eth","err","data"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,SAAlB;AAEA,wBAA8BC,qBAA9B;AAAA;AAAA;;;;;2BAAe,iBAAqCC,IAArC,EAA2CC,IAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiDC,YAAAA,YAAjD,2DAAgE,GAAhE;AACTC,YAAAA,OADS,GACC,IADD;;AAAA;AAAA,kBAENA,OAAO,KAAK,IAFN;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAIKC,4BAA4B,CAACJ,IAAD,EAAOC,IAAP,CAJjC;;AAAA;AAIXE,YAAAA,OAJW;AAAA;AAAA,mBAKLL,KAAK,CAACI,YAAD,CALA;;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAONC,OAPM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAUf,SAASC,4BAAT,CAAsCJ,IAAtC,EAA4CC,IAA5C,EAAkD;AAChD;AACA,SAAO,IAAII,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCP,IAAAA,IAAI,CAACQ,GAAL,CAAST,qBAAT,CAA+BE,IAA/B,EAAqC,UAASQ,GAAT,EAAcC,IAAd,EAAoB;AACvD,UAAID,GAAG,KAAK,IAAZ,EAAkBF,MAAM,CAACE,GAAD,CAAN,CAAlB,KACKH,OAAO,CAACI,IAAD,CAAP;AACN,KAHD;AAID,GALM,CAAP;AAMD","sourcesContent":["import sleep from './sleep';\n\nexport default async function getTransactionReceipt(web3, hash, pollInterval = 500) {\n  let receipt = null;\n  while (receipt === null) {\n    // we are going to check every second if transation is mined or not, once it is mined we'll leave the loop\n    receipt = await getTransactionReceiptPromise(web3, hash);\n    await sleep(pollInterval);\n  }\n  return receipt;\n}\n\nfunction getTransactionReceiptPromise(web3, hash) {\n  // here we just promisify getTransactionReceipt function for convenience\n  return new Promise((resolve, reject) => {\n    web3.eth.getTransactionReceipt(hash, function(err, data) {\n      if (err !== null) reject(err);\n      else resolve(data);\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"module"}