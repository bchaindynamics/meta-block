{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar fast_deep_equal_1 = __importDefault(require(\"fast-deep-equal\"));\n\nvar web3_1 = __importDefault(require(\"web3\"));\n\nvar events_1 = require(\"events\");\n\nvar timeout_1 = __importDefault(require(\"../util/timeout\"));\n\nvar gsn_provider_1 = require(\"@openzeppelin/gsn-provider\");\n\nvar network_1 = __importDefault(require(\"../util/network\"));\n\nvar providerName_1 = __importDefault(require(\"../util/providerName\")); // TODO: Change event to use types using conditional types\n\n\nvar Web3Context =\n/** @class */\nfunction (_super) {\n  __extends(Web3Context, _super);\n\n  function Web3Context(provider, options) {\n    var _this = _super.call(this) || this;\n\n    _this.connected = false;\n    _this.accounts = [];\n    _this.networkId = null;\n    _this.networkName = null;\n    var fullOptions = Object.assign({}, {\n      timeout: 3000,\n      pollInterval: 500,\n      gsn: false\n    }, options);\n    if (!provider) throw new Error('A web3 provider has to be defined');\n\n    if (fullOptions.gsn) {\n      var gsnOptions = typeof fullOptions.gsn === 'object' ? fullOptions.gsn : {\n        useGSN: true\n      };\n      provider = !gsnOptions.dev ? new gsn_provider_1.GSNProvider(provider, gsnOptions) : new gsn_provider_1.GSNDevProvider(provider, gsnOptions);\n    }\n\n    _this.providerName = providerName_1.default(provider);\n    _this.lib = new web3_1.default(provider);\n    _this.timeout = fullOptions.timeout;\n    _this.pollInterval = fullOptions.pollInterval;\n    return _this;\n  }\n\n  Web3Context.prototype.startPoll = function () {\n    if (!this.pollHandle) {\n      // TODO: polling interval should depend on kind of web3 provider\n      // We can query local providers often but doing the same for the network providers may create a lot of overhead\n      this.pollHandle = setTimeout(this.poll.bind(this), this.pollInterval);\n    }\n  };\n\n  Web3Context.prototype.stopPoll = function () {\n    if (this.pollHandle) {\n      clearTimeout(this.pollHandle);\n      this.pollHandle = undefined;\n    }\n  };\n\n  Web3Context.prototype.poll = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var networkIdName, accountsName, connectedName, networkNameName, newNetworkId, newNetworkName_1, newAccounts, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            networkIdName = 'networkId';\n            accountsName = 'accounts';\n            connectedName = 'connected';\n            networkNameName = 'networkName';\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 4, 5, 6]);\n\n            return [4\n            /*yield*/\n            , timeout_1.default(this.lib.eth.net.getId(), this.timeout)];\n\n          case 2:\n            newNetworkId = _a.sent();\n            newNetworkName_1 = network_1.default(newNetworkId);\n            this.updateValueAndFireEvent(newNetworkName_1, networkNameName);\n            this.updateValueAndFireEvent(newNetworkId, networkIdName, Web3Context.NetworkIdChangedEventName, function () {\n              return [newNetworkName_1];\n            });\n            return [4\n            /*yield*/\n            , timeout_1.default(this.lib.eth.getAccounts(), this.timeout)];\n\n          case 3:\n            newAccounts = _a.sent();\n            this.updateValueAndFireEvent(newAccounts, accountsName, Web3Context.AccountsChangedEventName); // if web3 provider calls are success then we are connected\n\n            this.updateValueAndFireEvent(true, connectedName, Web3Context.ConnectionChangedEventName);\n            return [3\n            /*break*/\n            , 6];\n\n          case 4:\n            e_1 = _a.sent(); // provider methods fail so we have to update the state and fire the events\n\n            this.updateValueAndFireEvent(false, connectedName, Web3Context.ConnectionChangedEventName);\n            this.updateValueAndFireEvent(null, networkIdName, Web3Context.NetworkIdChangedEventName, function () {\n              return [null];\n            });\n            this.updateValueAndFireEvent(null, networkNameName);\n            this.updateValueAndFireEvent(null, accountsName, Web3Context.AccountsChangedEventName);\n            return [3\n            /*break*/\n            , 6];\n\n          case 5:\n            this.pollHandle = setTimeout(this.poll.bind(this), this.pollInterval);\n            return [7\n            /*endfinally*/\n            ];\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  Web3Context.prototype.updateValueAndFireEvent = function (newValue, property, eventName, getArgs) {\n    if (getArgs === void 0) {\n      getArgs = function getArgs() {\n        return [];\n      };\n    }\n\n    if (!fast_deep_equal_1.default(newValue, this[property])) {\n      this[property] = newValue;\n      if (eventName) this.emit.apply(this, [eventName, this[property]].concat(getArgs()));\n    }\n  }; // request access according to the EIP\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1102.md\n\n\n  Web3Context.prototype.requestAuth = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        // Request authentication\n        if (this.lib.currentProvider.send !== undefined) {\n          return [2\n          /*return*/\n          , new Promise(function (resolve, reject) {\n            var responseHandler = function responseHandler(error, response) {\n              if (error || response.error) {\n                reject(error || response.error);\n              } else {\n                resolve(response.result);\n              }\n            };\n\n            var send = _this.lib.currentProvider.send;\n            send({\n              method: 'eth_requestAccounts'\n            }, responseHandler);\n          })];\n        } else return [2\n        /*return*/\n        , Promise.reject(new Error(\"Web3 provider doesn't support send method\"))];\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  Web3Context.NetworkIdChangedEventName = 'NetworkIdChanged';\n  Web3Context.AccountsChangedEventName = 'AccountsChanged';\n  Web3Context.ConnectionChangedEventName = 'ConnectionChanged';\n  return Web3Context;\n}(events_1.EventEmitter);\n\nexports.default = Web3Context;","map":null,"metadata":{},"sourceType":"script"}